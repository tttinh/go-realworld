// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteFollow = `-- name: DeleteFollow :exec
DELETE FROM follows
WHERE follower_id=$1 AND following_id=$2
`

type DeleteFollowParams struct {
	FollowerID  int64
	FollowingID int64
}

func (q *Queries) DeleteFollow(ctx context.Context, arg DeleteFollowParams) error {
	_, err := q.db.Exec(ctx, deleteFollow, arg.FollowerID, arg.FollowingID)
	return err
}

const getProfileByName = `-- name: GetProfileByName :one
SELECT id, username, email, password, bio, image, created_at, updated_at,
    CASE WHEN EXISTS (
        SELECT 1 FROM follows f
        WHERE f.follower_id = $1
        AND f.following_id = users.id
    ) THEN true ELSE false END AS following
FROM users
WHERE username = $2
`

type GetProfileByNameParams struct {
	FollowerID    int64
	FollowingName string
}

type GetProfileByNameRow struct {
	ID        int64
	Username  string
	Email     string
	Password  string
	Bio       pgtype.Text
	Image     pgtype.Text
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	Following bool
}

func (q *Queries) GetProfileByName(ctx context.Context, arg GetProfileByNameParams) (GetProfileByNameRow, error) {
	row := q.db.QueryRow(ctx, getProfileByName, arg.FollowerID, arg.FollowingName)
	var i GetProfileByNameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Following,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password, bio, image, created_at, updated_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password, bio, image, created_at, updated_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password, bio, image, created_at, updated_at
FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertFollow = `-- name: InsertFollow :exec
INSERT INTO follows (
    follower_id,
    following_id
) VALUES (
    $1,
    $2
) ON CONFLICT DO NOTHING
`

type InsertFollowParams struct {
	FollowerID  int64
	FollowingID int64
}

func (q *Queries) InsertFollow(ctx context.Context, arg InsertFollowParams) error {
	_, err := q.db.Exec(ctx, insertFollow, arg.FollowerID, arg.FollowingID)
	return err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (
    username,
    email,
    password
) VALUES (
    $1,
    $2,
    $3
)
RETURNING id, username, email, password, bio, image, created_at, updated_at
`

type InsertUserParams struct {
	Username string
	Email    string
	Password string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Username, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = coalesce($1, username),
    email = coalesce($2, email),
    password = coalesce($3, password),
    bio = coalesce($4, bio),
    image = coalesce($5, image),
    updated_at = now()
WHERE id = $6
RETURNING id, username, email, password, bio, image, created_at, updated_at
`

type UpdateUserParams struct {
	Username pgtype.Text
	Email    pgtype.Text
	Password pgtype.Text
	Bio      pgtype.Text
	Image    pgtype.Text
	ID       int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Bio,
		arg.Image,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
